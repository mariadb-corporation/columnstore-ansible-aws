---
- name: Include OS-specific variables.
  include_vars: "all.yml"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml"

#- set_fact:
#    target_interface: '{{ item }}'
#  when: (hostvars[inventory_hostname]['ansible_%s' % item]|default({})).get('ipv4', {}).get('address') == ansible_host or ansible_host in ((hostvars[inventory_hostname]['ansible_%s' % item]|default({})).get('ipv4_secondaries'))|map(attribute='address')|list
#  with_items:
#    - '{{ ansible_interfaces }}'

- name: "Setting SELinux Permissive (CentOS)"
  selinux:
    policy: targeted
    state: permissive
  when: ansible_distribution == 'CentOS'

- name: "Disabling firewalld (CentOS)"
  systemd:
    name: firewalld
    state: stopped
    enabled: False
  when: ansible_distribution == 'CentOS'
  ignore_errors: true

- name: "Disabling AppArmor (Ubuntu)"
  systemd:
    name: apparmor
    state: stopped
    enabled: no
  when: ansible_distribution == 'Ubuntu'

- name: "Disabling UFW (Ubuntu)"
  systemd:
    name: ufw
    state: stopped
    enabled: no
  when: ansible_distribution == 'Ubuntu'

- name: "Upgrading All Packages (CentOS)"
  package:
    name: '*'
    state: latest
    update_cache: yes
  when: ansible_distribution == 'CentOS'

- name: "Upgrading All Packages (Ubuntu)"
  apt:
    name: '*'
    state: latest
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: "Installing Some Prerequisites"
  package:
    name: '{{ packages }}'
    state: present
  vars:
    packages:
    - '{{ git }}'
    - '{{ htop }}'
    - '{{ jemalloc }}'
    - '{{ jq }}'
    - '{{ mlocate }}'
    - '{{ nano }}'
    - '{{ wget }}'

- name: "Setting System Character Set"
  command: localedef -i en_US -f UTF-8 en_US.UTF-8

#- name: "Adjusting System vm.swappiness"
#  sysctl:
#    name: vm.swappiness
#    value: '10'
#    state: present

#- name: "Adjusting System vm.vfs_cache_pressure"
#  sysctl:
#    name: vm.vfs_cache_pressure
#    value: '10'
#    state: present

- name: "Adjusting System txqueuelen"
  lineinfile:
    path: /etc/rc.d/rc.local
    line: '/usr/sbin/ifconfig eth0 txqueuelen 10000'
    create: yes

#- name: "Adjusting System net.core.rmem_max"
#  sysctl:
#    name: net.core.rmem_max
#    value: '16777216'
#    state: present

#- name: "Adjusting System net.core.wmem_max"
#  sysctl:
#    name: net.core.wmem_max
#    value: '16777216'
#    state: present

#- name: "Adjusting System net.ipv4.tcp_rmem"
#  sysctl:
#    name: net.ipv4.tcp_rmem
#    value: '4096 87380 16777216'
#    state: present

#- name: "Adjusting System net.ipv4.tcp_wmem"
#  sysctl:
#    name: net.ipv4.tcp_wmem
#    value: '4096 65536 16777216'
#    state: present

#- name: "Adjusting System net.ipv4.tcp_no_metrics_save"
#  sysctl:
#    name: net.ipv4.tcp_no_metrics_save
#    value: '1'
#    state: present
#
#- name: "Adjusting System net.core.netdev_max_backlog"
#  sysctl:
#    name: net.core.netdev_max_backlog
#    value: '2500'
#    state: present

- name: "Removing Conflicts"
  package:
    name: '{{ mariadb_libs }}'
    state: absent

- name: "Getting MariaDB Enterprise Repo Setup Script"
  get_url:
    url: https://dlm.mariadb.com/enterprise-release-helpers/mariadb_es_repo_setup
    dest: /usr/local/bin/mariadb_es_repo_setup
    mode: 'a+x'

- name: "Removing Previous MariaDB Yum Repo If Necessary"
  command: rm -rf /etc/yum.repos.d/mariadb*
  when: ansible_os_family == 'RedHat'

- name: "Removing Previous MariaDB Apt Repo If Necessary"
  command: rm -rf /etc/apt/sources.list.d/mariadb*
  when: ansible_os_family == 'Debian'

- name: "Setting Up MariaDB Enterprise Repo"
  command: /usr/local/bin/mariadb_es_repo_setup --token={{ enterprise_token }} --skip-tools --mariadb-server-version='{{ mariadb_version }}' --mariadb-maxscale-version='{{ maxscale_version }}' --apply

- name: "Creating CMAPI Folder"
  file:
    path: /opt/cmapi
    state: directory
    mode: '0755'

- name: "Downloading CMAPI Server"
  unarchive:
    src: https://dlm.mariadb.com/{{ enterprise_token }}/mariadb-enterprise-server/10.5.4-2/cmapi/mariadb-columnstore-cmapi.tar.gz
    dest: /opt/cmapi
    remote_src: yes

- name: "Installing MariaDB Items"
  package:
    name: '{{ packages }}'
    state: present
    update_cache: yes
  vars:
    packages:
    - '{{ mariadb_server }}'
    - '{{ mariadb_cs_engine }}'
    - '{{ mariadb_backup }}'

- name: "Configuring Storagemanager"
  template:
    src: ../../templates/storagemanager.cnf.j2
    dest: /etc/columnstore/storagemanager.cnf
    owner: mysql
    group: mysql
  when: use_s3 == true

- name: "Checking If CMAPI Is Already Installed"
  stat:
    path: /etc/systemd/system/mariadb-columnstore-cmapi.service
  register: stat_result

- name: "Installing CMAPI Server"
  shell:
    cmd: ./service.sh install
    chdir: /opt/cmapi
  when: not stat_result.stat.exists
