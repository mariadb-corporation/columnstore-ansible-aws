---

- hosts: "primary"
  become: yes
  become_user: root
  vars_files:
    - '../inventory/group_vars/distro/{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml'

  tasks:

  - name: "Setting Facts"
    set_fact:
      first_octet: "{{ (hostvars['mcs1'].private_ip).split('.')[0:1][0] }}.%"

  - name: "Turn Off Strict Password"
    mysql_variables:
      variable: strict_password_validation
      value: 'OFF'
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Removing 'Test' Database If Exists"
    mysql_db:
      name: test
      state: absent
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Remove admin_user if exists"
    mysql_user:
      name: '{{ admin_user }}'
      host: '%'
      state: absent
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Adding '{{ admin_user }}'@'%'"
    mysql_user:
      name: '{{ admin_user }}'
      host: '%'
      password: '{{ admin_pass }}'
      update_password: on_create
      priv: '*.*:ALL,GRANT'
      state: present
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Remove cej_user if exists"
    mysql_user:
      name: '{{ cej_user }}'
      host: '127.0.0.1'
      state: absent
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Adding '{{ cej_user }}'@'127.0.0.1' User To Database"
    mysql_user:
      name: '{{ cej_user }}'
      host: '127.0.0.1'
      password: '{{ cej_pass }}'
      update_password: on_create
      priv: '*.*:SELECT,PROCESS'
      state: present
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Remove maxscale_user if exists"
    mysql_user:
      name: '{{ maxscale_user }}'
      host: '{{ first_octet }}'
      state: absent
      login_unix_socket: '{{ mariadb_socket }}'

  - name: "Adding '{{ maxscale_user }}'@'{{ first_octet }}' User To Database"
    mysql_user:
      name: '{{ maxscale_user }}'
      host: '{{ first_octet }}'
      password: '{{ maxscale_pass }}'
      update_password: on_create
      priv: '*.*:SHOW DATABASES,BINLOG ADMIN,READ_ONLY ADMIN,RELOAD,REPLICATION MASTER ADMIN,REPLICATION SLAVE ADMIN,REPLICATION SLAVE,SLAVE MONITOR/mysql.*:SELECT'
      state: present
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Remove repli_user if exists"
    mysql_user:
      name: '{{ repli_user }}'
      host: '{{ first_octet }}'
      state: absent
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Adding '{{ repli_user }}'@'{{ first_octet }}' User To Database"
    mysql_user:
      name: '{{ repli_user }}'
      host: '{{ first_octet }}'
      password: '{{ repli_pass }}'
      update_password: on_create
      priv: '*.*:REPLICATION MASTER ADMIN,REPLICATION SLAVE ADMIN,REPLICATION SLAVE,SLAVE MONITOR'
      state: present
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Turn On Strict Password"
    mysql_variables:
      variable: strict_password_validation
      value: 'ON'
      login_unix_socket: '{{ mariadb_socket }}'

  - name: "Updating Columnstore.xml With Cross Engine Support User"
    command: mcsSetConfig CrossEngineSupport User '{{ cej_user }}'

  - name: "Updating Columnstore.xml With Cross Engine Support Password"
    command: mcsSetConfig CrossEngineSupport Password '{{ cej_pass }}'

- hosts: "replicas"
  become: yes
  become_user: root
  vars_files:
    - '../inventory/group_vars/distro/{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml'

  tasks:

  - name: "Setting Replicas Read Only"
    mysql_variables:
      variable: read_only
      value: '1'
      login_unix_socket: '{{ mariadb_socket }}'

  - name: "Stopping Replicas"
    mysql_replication:
      mode: stopreplica
      login_unix_socket: '{{ mariadb_socket }}'

  - name: "Resetting Replicas"
    mysql_replication:
      mode: resetreplica
      login_unix_socket: '{{ mariadb_socket }}'

  - name: "Setting Primary Info"
    mysql_replication:
      mode: changeprimary
      master_host: "{{ hostvars['mcs1'].private_ip }}"
      master_user: '{{ repli_user }}'
      master_password: '{{ repli_pass }}'
      login_unix_socket: '{{ mariadb_socket }}'
    no_log: true

  - name: "Converting to MariaDB GTID"
    command: mysql -e "CHANGE MASTER TO master_use_gtid=slave_pos";

  - name: "Starting Replicas"
    mysql_replication:
      mode: startreplica
      login_unix_socket: '{{ mariadb_socket }}'

- hosts: "primary"
  become: yes
  become_user: root
  vars_files:
    - '../inventory/group_vars/distro/{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml'

  tasks:

  - name: "Fetch existing nodes in the cluster"
    uri:
      url: "https://{{ hostvars['mcs1'].ansible_host }}:8640/cmapi/0.4.0/cluster/status"
      method: GET
      headers:
        Content-Type: application/json
        x-api-key: "{{ api_key }}"
      validate_certs: no
      return_content: yes
      status_code: 200
    register: cluster_info

  - name: "Debug: Print existing nodes in the cluster"
    debug:
      msg: "{{ cluster_info.json }}"

  - name: "Remove existing nodes from the cluster"
    shell: mcs cluster node remove --node {{ item.key }}
    with_dict: "{{ cluster_info.json }}"
    when: cluster_info.json['num_nodes'] | int > 0

  - name: "Adding Nodes To ColumnStore Cluster"
    uri:
      url: "https://{{ hostvars['mcs1'].ansible_host }}:8640/cmapi/0.4.0/cluster/node"
      method: PUT
      headers:
        Content-Type: application/json
        x-api-key: "{{ api_key }}"
      validate_certs: no
      return_content: yes
      status_code: 200
      body_format: json
      body:
        timeout: 120
        node: "{{ hostvars[item].private_ip }}"
      timeout: 180
    with_items: "{{ groups['all'] | reject('search', '^mx') | reject('equalto', 'devhost') | list }}"
