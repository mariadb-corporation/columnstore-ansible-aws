---

- hosts: "primary,replicas"
  become: yes
  become_user: root
  gather_facts: true
  vars_files:
    - '../inventory/group_vars/distro/{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml'
    - '../inventory/group_vars/all.yml'

  tasks:

  - name: "Ensure MariaDB RPMs directory exists"
    file:
      path: "{{ mariadb_rpms_path }}"
      state: directory
      mode: '0755'

  - name: "Check if MariaDB RPMs directory exists"
    stat:
      path: "{{ mariadb_rpms_path }}"
    register: rpm_dir

  - name: "Fail if MariaDB RPMs directory does not exist"
    fail:
      msg: "The directory {{ mariadb_rpms_path }} does not exist."
    when: not rpm_dir.stat.exists

  - name: "Debug cs_package_manager_custom_version"
    debug:
      var: cs_package_manager_custom_version
    when: cs_package_manager_custom_version is defined and cs_package_manager_custom_version != "" and cs_package_manager_custom_version is not none

  - name: "Download cs_package_manager script"
    get_url:
      url: "https://raw.githubusercontent.com/mariadb-corporation/mariadb-columnstore-engine/refs/heads/stable-23.10/cmapi/scripts/cs_package_manager.sh"
      dest: "{{ mariadb_rpms_path }}/cs_package_manager.sh"
      mode: '0755'
    when: cs_package_manager_custom_version is defined and cs_package_manager_custom_version != "" and cs_package_manager_custom_version is not none

- hosts: "primary,replicas"
  become: yes
  become_user: root
  gather_facts: true
  vars_files:
    - '../inventory/group_vars/distro/{{ ansible_distribution|lower }}{{ ansible_distribution_major_version }}.yml'
    - '../inventory/group_vars/all.yml'

  tasks:

  - name: "Download MariaDB packages using cs_package_manager script"
    command: >-
      bash {{ mariadb_rpms_path }}/cs_package_manager.sh download {{ cs_package_manager_custom_version }}
      -d {{ mariadb_rpms_path }} --with-dev
      {% if dev_drone_key is defined and dev_drone_key != "" %}-dev {{ dev_drone_key }}{% endif %}
    register: cs_package_manager_output
    when: cs_package_manager_custom_version is defined and cs_package_manager_custom_version != "" and cs_package_manager_custom_version is not none

  - name: "cs_package_manager output"
    debug:
      msg: "{{ cs_package_manager_output.stdout }}"
    when: cs_package_manager_custom_version is defined and cs_package_manager_custom_version != "" and cs_package_manager_custom_version is not none and cs_package_manager_output is defined

  - name: "cs_package_manager errors"
    debug:
      msg: "{{ cs_package_manager_output.stderr }}"
    when: cs_package_manager_custom_version is defined and cs_package_manager_custom_version != "" and cs_package_manager_custom_version is not none and cs_package_manager_output is defined and cs_package_manager_output.stderr != ""

  - name: "Check for package files in the directory"
    find:
      paths: "{{ mariadb_rpms_path }}"
      patterns: "{{ '*.rpm' if ansible_os_family == 'RedHat' else '*.deb' }}"
      use_regex: false
    register: package_files

  - name: "Fail if no package files are found in the directory"
    fail:
      msg: "The directory {{ mariadb_rpms_path }} does not contain any {{ 'RPM' if ansible_os_family == 'RedHat' else 'DEB' }} files."
    when: ((package_files.files is defined) and ((package_files.files | length) == 0)) or
          ((package_files.files is not defined) and ((package_files.matched | default(0)) == 0))

  - name: "Installing MariaDB RPMs from directory"
    yum:
      name: "{{ package_files.files | map(attribute='path') | list }}"
      state: present
      disable_gpg_check: yes
    when:
      - ansible_os_family == "RedHat"
      - (package_files.matched | default(0)) > 0

  - name: "Installing MariaDB DEBs from directory"
    command: >-
      apt-get install -y --allow-downgrades
      {{ package_files.files | map(attribute='path') | join(' ') }}
    environment:
      DEBIAN_FRONTEND: noninteractive
    when:
      - ansible_os_family == "Debian"
      - (package_files.matched | default(0)) > 0

